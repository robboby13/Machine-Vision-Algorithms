#importing some useful packages
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import os
import cv2
import math
import os

## removing the outliers (adapted from http://stackoverflow.com/questions/11686720/is-there-a-numpy-builtin-to-reject-outliers-from-a-list)

def to_keep_index(obs, std=1.5):
    return np.array(abs(obs - np.mean(obs)) < std*np.std(obs))


## color selection for yellow and white, using the HSL color space

def color_selection(image):
    
    hls_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS)

    ## selecting colors yellow and white
    white_color = cv2.inRange(hls_image, np.uint8([20,200,0]), np.uint8([255,255,255]))
    yellow_color = cv2.inRange(hls_image, np.uint8([10,50,100]), np.uint8([100,255,255]))

    combined_color_images = cv2.bitwise_or(white_color, yellow_color)
    return cv2.bitwise_and(image, image, mask = combined_color_images)

## calc average of lines

def avg_lines(lines):
    
    neg = np.empty([1,3])
    pos = np.empty([1,3])
    

## calculate slopes for each line to identify the positive and negative lines
    for line in lines:
        for x1,y1,x2,y2 in line:
            slope = (y2-y1)/(x2-x1)
            intercept = y1 - slope*x1
            line_length = np.sqrt((y2-y1)**2+(x2-x1)**2)
            if slope < 0 and line_length > 10:
                neg = np.append(neg,np.array([[slope, intercept, line_length]]),axis = 0)
            elif slope > 0 and line_length > 10:
                pos = np.append(pos,np.array([[slope, intercept, line_length]]),axis = 0)
    
    ## just keep the observations with slopes with 1.5 std dev
    neg = neg[to_keep_index(neg[:,0])]
    pos = pos[to_keep_index(pos[:,0])]
    
    ## weighted average of the slopes and intercepts based on the length of the line segment
    neg_lines = np.dot(neg[1:,2],neg[1:,:2])/np.sum(neg[1:,2]) if len(neg[1:,2]) > 0 else None
    pos_lines = np.dot(pos[1:,2],pos[1:,:2])/np.sum(pos[1:,2]) if len(pos[1:,2]) > 0 else None
    
    return neg_lines, pos_lines

## generate the endpoints of the lane line segments

def gen_endpoints(img, slopes_intercepts):

    imshape = img.shape 
    
    if None not in slopes_intercepts:
        neg_points = [0, np.int(slopes_intercepts[0][0]*0 + slopes_intercepts[0][1]),np.int(imshape[1]*0.45), np.int(slopes_intercepts[0][0]*np.int(imshape[1]*0.45) + slopes_intercepts[0][1])]
        pos_points = [np.int(imshape[1]*0.55), np.int(slopes_intercepts[1][0]*imshape[1]*0.55 + slopes_intercepts[1][1]), imshape[1], np.int(slopes_intercepts[1][0]*imshape[1] + slopes_intercepts[1][1])]
    else:
        return None
    
    return [neg_points, pos_points]

## draw the lane lines on an image

def gen_lane_lines(img, endpoints, color = [0,255,0], thickness = 7):
    
    line_img = np.zeros((img.shape[0], img.shape[1], 3), dtype=np.uint8)

    ## obtain slopes, intercepts, and endpoints of the weighted average line segments
    if endpoints is not None:
        for line in endpoints:
            
            ## draw lane lines
            cv2.line(line_img, (line[0],line[1]), (line[2],line[3]), color, thickness)
            
    return line_img


def pos_neg_lines(lines):
    
    slopes=np.array([])
    
    ## calculate slopes for each line to identify the positive and negative lines
    for line in lines:
        for x1,y1,x2,y2 in line:
            slopes = np.append(slopes,(y2-y1)/(x2-x1))

    pos_lines = lines[slopes > 0]
    neg_lines = lines[slopes < 0]
    
    return pos_lines,neg_lines

def get_pos_neg_lines(line_array):
    x = []
    y = []

    ## turn the line points into an array
    for line in line_array:
        for x1,y1,x2,y2 in line:
            x.append(x1)
            x.append(x2)
            y.append(y1)
            y.append(y2)

    x_to_keep = to_keep_index(x)
    
    x = np.array(x)[x_to_keep].reshape(-1, 1)
    y = np.array(y)[x_to_keep].reshape(-1, 1)

    ## use regression to extrapolate a fitted line (FIX: NEED TO CONSIDER CURVES!)
    x = np.array(x).reshape(-1, 1)
    # x = np.append(x,x**2,axis=1) ## creating polynomial for curves
    y = np.array(y).reshape(-1, 1)

    ## using a robust regression
    lin_reg = linear_model.RANSACRegressor()
    lin_reg.fit(x,y)


    ## only create lines for the correct portion of the lane
    if min(x[:,0]) < 490:
        # x_range = np.linspace(0,max(x[:,0]),len(y)).reshape(-1,1)
        x_range = np.linspace(0,460,len(y)).reshape(-1,1)
    else:
        # x_range = np.linspace(min(x[:,0]),900,len(y)).reshape(-1,1)
        x_range = np.linspace(500,900,len(y)).reshape(-1,1)
        
    # x_range = np.append(x_range,x_range**2, axis = 1)
    y_pred = lin_reg.predict(x_range)

    ## saving just the end points
    min_x = min(x)
    min_y = min(y_pred)

    max_x = max(x)
    max_y = max(y_pred)
    
    ## fixing the flipped axis for left hand side line
    if lin_reg.coef_[0] < 0:
        mid_y = (max_y+min_y)/2
        max_y = max_y - 2*np.abs(max_y-mid_y)
        min_y = min_y + 2*np.abs(min_y-mid_y)
    
    points = np.append(x_range[:,0].reshape(-1,1), y_pred, axis=1)
    
    return(np.array(points, dtype=np.int32))

## draw polylines given array of points
def draw_polylines(img, pts, color=[255, 0, 0], thickness=3):
    cv2.polylines(img, [pts], color = color, thickness = thickness, isClosed = False)

"""Helper Functions

Below are some helper functions to help get you started. They should look familiar from the lesson!
In [6]:"""



def draw_lines(img, lines, color=[255, 0, 0], thickness=10):
	imshape = img.shape
	left_x1 = []
	left_x2 = []
	right_x1 = []
	right_x2 = []
	y_min = img.shape[0]
	y_max = int(img.shape[0]*0.611)
	for line in lines:
		for x1,y1,x2,y2 in line:
			if ((y2-y1)/(x2-x1)) < 0:
				mc = np.polyfit([x1, x2], [y1, y2], 1)
				left_x1.append(np.int(np.float((y_min - mc[1]))/np.float(mc[0])))
				left_x2.append(np.int(np.float((y_max - mc[1]))/np.float(mc[0])))
#			cv2.line(img, (xone, imshape[0]), (xtwo, 330), color, thickness)
			elif ((y2-y1)/(x2-x1)) > 0:
                		mc = np.polyfit([x1, x2], [y1, y2], 1)
				right_x1.append(np.int(np.float((y_min - mc[1]))/np.float(mc[0])))
				right_x2.append(np.int(np.float((y_max - mc[1]))/np.float(mc[0])))
#			cv2.line(img, (xone, imshape[0]), (xtwo, 330), color, thickness)
		l_avg_x1 = np.int(np.nanmean(left_x1))
		l_avg_x2 = np.int(np.nanmean(left_x2))
		r_avg_x1 = np.int(np.nanmean(right_x1))
		r_avg_x2 = np.int(np.nanmean(right_x2))
#			print([l_avg_x1, l_avg_x2, r_avg_x1, r_avg_x2])
		cv2.line(img, (l_avg_x1, y_min), (l_avg_x2, y_max), color, thickness)
		cv2.line(img, (r_avg_x1, y_min), (r_avg_x2, y_max), color, thickness)    


def hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap):

	"""img should be the output of a Canny transform.
        
	Returns an image with hough lines drawn."""
	
	lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)
	line_img = np.zeros((roi_image, 3), dtype=np.uint8)
	draw_lines(line_img, lines)
	return line_img

def region_of_interest(img, vertices):
    """
    Applies an image mask.
    
    Only keeps the region of the image defined by the polygon
    formed from `vertices`. The rest of the image is set to black.
    """
    #defining a blank mask to start with
    mask = np.zeros_like(img)   
    
    #defining a 3 channel or 1 channel color to fill the mask with depending on the input image
    if len(img.shape) > 2:
        channel_count = img.shape[2]  # i.e. 3 or 4 depending on your image
        ignore_mask_color = (255,) * channel_count
    else:
        ignore_mask_color = 255
        
    #filling pixels inside the polygon defined by "vertices" with the fill color    
    cv2.fillPoly(mask, vertices, ignore_mask_color)
    
    #returning the image only where mask pixels are nonzero
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

